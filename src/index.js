#!/usr/bin/env node

/**
 * Binance Trading Bot - Main Entry Point
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –¥–ª—è Binance –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤
 */

import 'dotenv/config';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import fs from 'fs';

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è __dirname –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –Ü–º–ø–æ—Ä—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
import logger from './utils/logger.js';
import { validateEnvironmentVariables } from './utils/validators.js';
import { getDatabase, initializeDatabase } from './database/init.js';
import { TradingEngine } from './simulation/tradingEngine.js';
import { TradingSimulator } from './simulation/simulator.js';
import { ParameterOptimizer } from './analysis/optimizer.js';
import { NewListingScalperStrategy } from './simulation/strategies/newListingScalper.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let tradingEngine = null;
let isShuttingDown = false;
const startTime = Date.now();

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
 */
async function main() {
  try {
    // –í—ñ—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    displayWelcomeMessage();
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    await validateEnvironment();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await initializeDatabase();
    
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É —Ä–æ–±–æ—Ç–∏
    const mode = process.argv[2] || 'help';
    
    switch (mode.toLowerCase()) {
      case 'trade':
        await startTradingMode();
        break;
      case 'simulate':
        await startSimulationMode();
        break;
      case 'optimize':
        await startOptimizationMode();
        break;
      case 'backtest':
        await startBacktestMode();
        break;
      case 'status':
        await showStatus();
        break;
      case 'balance':
        await showBalance();
        break;
      case 'help':
      default:
        showHelp();
        break;
    }
    
  } catch (error) {
    logger.error('Critical error in main function:', error);
    process.exit(1);
  }
}

/**
 * –ü–æ–∫–∞–∑ –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
 */
function displayWelcomeMessage() {
  const version = getVersion();
  const environment = process.env.BOT_ENV || 'development';
  
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                  üöÄ BINANCE TRADING BOT üöÄ                   ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π –±–æ—Ç –¥–ª—è –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤ Binance    ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –í–µ—Ä—Å—ñ—è: ${version.padEnd(51)}‚ïë
‚ïë  –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${environment.padEnd(47)}‚ïë
‚ïë  –ó–∞–ø—É—â–µ–Ω–æ: ${new Date().toLocaleString('uk-UA').padEnd(49)}‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
}

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ—Ä—Å—ñ—ó –∑ package.json
 */
function getVersion() {
  try {
    const packagePath = join(__dirname, '../package.json');
    const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    return packageData.version || '1.0.0';
  } catch (error) {
    return '1.0.0';
  }
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
 */
async function validateEnvironment() {
  logger.info('üîç Validating environment variables...');
  
  const validation = validateEnvironmentVariables(process.env);
  
  if (!validation.isValid) {
    logger.error('‚ùå Environment validation failed:');
    validation.errors.forEach(error => logger.error(`   - ${error}`));
    process.exit(1);
  }
  
  if (validation.warnings && validation.warnings.length > 0) {
    logger.warn('‚ö†Ô∏è  Environment warnings:');
    validation.warnings.forEach(warning => logger.warn(`   - ${warning}`));
  }
  
  logger.info('‚úÖ Environment validation passed');
}

/**
 * –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
 */
async function startTradingMode() {
  logger.info('üéØ Starting trading mode...');
  
  try {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    const config = createTradingConfig();
    tradingEngine = new TradingEngine(config);
    
    // –ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞
    await tradingEngine.start();
    
    logger.info('‚úÖ Trading engine started successfully');
    logger.info('üìä Bot is now scanning for new listings...');
    
    // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
    const statsInterval = setInterval(() => {
      if (!isShuttingDown) {
        const stats = tradingEngine.getStats();
        logger.info(`üìà Stats: Balance: ${stats.currentBalance} USDT | Active: ${stats.activeTrades} | Total: ${stats.totalTrades}`);
      }
    }, 30000);
    
    // –û—á–∏—Å—Ç–∫–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ
    process.on('SIGTERM', () => clearInterval(statsInterval));
    process.on('SIGINT', () => clearInterval(statsInterval));
    
  } catch (error) {
    logger.error('‚ùå Failed to start trading mode:', error);
    process.exit(1);
  }
}

/**
 * –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó
 */
async function startSimulationMode() {
  logger.info('üéÆ Starting simulation mode...');
  
  try {
    const daysBack = parseInt(process.argv[3]) || 30;
    const configName = process.argv[4] || 'Default Simulation';
    
    logger.info(`üìä Running simulation for last ${daysBack} days`);
    
    const config = createSimulationConfig(configName);
    const simulator = new TradingSimulator(config);
    
    const results = await simulator.runSimulation(daysBack);
    
    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    displaySimulationResults(results);
    
  } catch (error) {
    logger.error('‚ùå Simulation failed:', error);
    process.exit(1);
  }
}

/**
 * –†–µ–∂–∏–º –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
 */
async function startOptimizationMode() {
  logger.info('üîß Starting parameter optimization...');
  
  try {
    const iterations = parseInt(process.argv[3]) || 50;
    
    logger.info(`üéØ Running optimization with ${iterations} iterations`);
    
    const baseConfig = createSimulationConfig('Optimization Base');
    const optimizer = new ParameterOptimizer();
    
    const optimizationParams = {
      takeProfitRange: [0.5, 3.0, 0.5],
      stopLossRange: [0.5, 2.0, 0.5],
      trailingStopRange: [0.2, 1.0, 0.2],
      buyAmountRange: [50, 200, 50],
      maxIterations: iterations,
      targetMetric: 'roi_percent'
    };
    
    const bestConfigs = await optimizer.optimize(baseConfig, optimizationParams);
    
    // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    displayOptimizationResults(bestConfigs);
    
  } catch (error) {
    logger.error('‚ùå Optimization failed:', error);
    process.exit(1);
  }
}

/**
 * –†–µ–∂–∏–º –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É
 */
async function startBacktestMode() {
  logger.info('üìà Starting backtest mode...');
  
  try {
    const daysBack = parseInt(process.argv[3]) || 180;
    const configFile = process.argv[4];
    
    let config;
    if (configFile) {
      // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ñ–∞–π–ª—É
      config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
    } else {
      config = createSimulationConfig('Backtest');
    }
    
    logger.info(`üìä Running backtest for last ${daysBack} days`);
    
    const simulator = new TradingSimulator(config);
    const results = await simulator.runSimulation(daysBack);
    
    // –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç
    displayBacktestResults(results);
    
    // –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const exportFile = `backtest_${Date.now()}.json`;
    fs.writeFileSync(exportFile, JSON.stringify(simulator.exportData(), null, 2));
    logger.info(`üìÑ Results exported to: ${exportFile}`);
    
  } catch (error) {
    logger.error('‚ùå Backtest failed:', error);
    process.exit(1);
  }
}

/**
 * –ü–æ–∫–∞–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
 */
async function showStatus() {
  try {
    const db = getDatabase();
    
    // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    const symbolsCount = db.prepare('SELECT COUNT(*) as count FROM symbols').get().count;
    const configsCount = db.prepare('SELECT COUNT(*) as count FROM simulation_configs').get().count;
    const resultsCount = db.prepare('SELECT COUNT(*) as count FROM simulation_results').get().count;
    
    // –û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    const latestResults = db.prepare(`
      SELECT sc.name, ss.roi_percent, ss.win_rate_percent, ss.total_trades
      FROM simulation_summary ss
      JOIN simulation_configs sc ON ss.config_id = sc.id
      ORDER BY ss.simulation_date DESC
      LIMIT 5
    `).all();
    
    console.log(`
üìä –°–ò–°–¢–ï–ú–ù–ò–ô –°–¢–ê–¢–£–°
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:
   ‚Ä¢ –°–∏–º–≤–æ–ª—ñ–≤: ${symbolsCount}
   ‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π: ${configsCount}  
   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤: ${resultsCount}

üìà –û—Å—Ç–∞–Ω–Ω—ñ —Å–∏–º—É–ª—è—Ü—ñ—ó:
${latestResults.map(r => 
  `   ‚Ä¢ ${r.name}: ROI ${r.roi_percent}% | Win Rate ${r.win_rate_percent}% | Trades ${r.total_trades}`
).join('\n')}

üîß –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: ${process.env.BOT_ENV || 'development'}
‚è±Ô∏è  Uptime: ${Math.round((Date.now() - startTime) / 1000)}s
    `);
    
  } catch (error) {
    logger.error('‚ùå Failed to get status:', error);
  }
}

/**
 * –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å—É –∞–∫–∞—É–Ω—Ç–∞
 */
async function showBalance() {
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±–∏ –±—É–≤ –≤–∏–∫–ª–∏–∫ API
    const balance = process.env.INITIAL_BALANCE_USDT || '10000';
    
    console.log(`
üí∞ –ë–ê–õ–ê–ù–° –ê–ö–ê–£–ù–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üíµ USDT: ${balance}
üè¶ –†–µ–∂–∏–º: ${process.env.BINANCE_TESTNET === 'true' ? 'Testnet' : 'Mainnet'}
    `);
    
  } catch (error) {
    logger.error('‚ùå Failed to get balance:', error);
  }
}

/**
 * –ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏
 */
function showHelp() {
  console.log(`
üìñ –î–û–í–Ü–î–ö–ê –ö–û–ú–ê–ù–î
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ –†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏:
   node src/index.js trade                    - –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ
   node src/index.js simulate [days] [name]   - –°–∏–º—É–ª—è—Ü—ñ—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 30 –¥–Ω—ñ–≤)
   node src/index.js optimize [iterations]    - –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 50)
   node src/index.js backtest [days] [config] - –î–µ—Ç–∞–ª—å–Ω–∏–π –±–µ–∫—Ç–µ—Å—Ç
   node src/index.js status                   - –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏
   node src/index.js balance                  - –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å—É –∞–∫–∞—É–Ω—Ç–∞
   node src/index.js help                     - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üìö –ü—Ä–∏–∫–ª–∞–¥–∏:
   npm run start                              - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ —Ç–æ—Ä–≥—ñ–≤–ª—ñ (testnet)
   node src/index.js simulate 90              - –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞ 90 –¥–Ω—ñ–≤
   node src/index.js optimize 100             - –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑ 100 —ñ—Ç–µ—Ä–∞—Ü—ñ–π
   node src/index.js backtest 180 config.json - –ë–µ–∫—Ç–µ—Å—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é

üîß –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:
   BOT_ENV=testnet|main|mynet                 - –í–∏–±—ñ—Ä —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
   BINANCE_API_KEY                            - API –∫–ª—é—á Binance
   BINANCE_API_SECRET                         - –°–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–ª—é—á Binance
   INITIAL_BALANCE_USDT                       - –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó

üìù –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:
   –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ–∞–π–ª–∏ .env.testnet, .env.main, .env.mynet
   –°–∫–æ–ø—ñ—é–π—Ç–µ .env.example —è–∫ —à–∞–±–ª–æ–Ω
  `);
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ
 */
function createTradingConfig() {
  return {
    name: 'Live Trading',
    simulationMode: false,
    
    // –¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    takeProfitPercent: parseFloat(process.env.TAKE_PROFIT_PERCENT) || 2.0,
    stopLossPercent: parseFloat(process.env.STOP_LOSS_PERCENT) || 1.0,
    trailingStopEnabled: process.env.TRAILING_STOP_ENABLED === 'true',
    trailingStopPercent: parseFloat(process.env.TRAILING_STOP_PERCENT) || 0.5,
    trailingStopActivationPercent: parseFloat(process.env.TRAILING_STOP_ACTIVATION_PERCENT) || 1.0,
    
    // –†–æ–∑–º—ñ—Ä–∏ –ø–æ–∑–∏—Ü—ñ–π
    buyAmountUsdt: parseFloat(process.env.BUY_AMOUNT_USDT) || 100,
    maxOpenTrades: parseInt(process.env.MAX_OPEN_TRADES) || 3,
    
    // –§—ñ–ª—å—Ç—Ä–∏ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ
    minLiquidityUsdt: parseFloat(process.env.MIN_LIQUIDITY_USDT) || 10000,
    maxPriceImpact: parseFloat(process.env.MAX_PRICE_IMPACT) || 0.5,
    
    // –ö–æ–º—ñ—Å—ñ—ó —Ç–∞ —Ç–∞–π–º—ñ–Ω–≥–∏
    binanceFeePercent: 0.1,
    cooldownSeconds: parseInt(process.env.COOLDOWN_SECONDS) || 300,
    maxTradeTimeMinutes: parseInt(process.env.MAX_TRADE_TIME_MINUTES) || 15
  };
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
 */
function createSimulationConfig(name) {
  return {
    name,
    simulationMode: true,
    
    // –¢–æ—Ä–≥–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó
    takeProfitPercent: 1.5,
    stopLossPercent: 0.8,
    trailingStopEnabled: true,
    trailingStopPercent: 0.3,
    trailingStopActivationPercent: 0.8,
    
    // –†–æ–∑–º—ñ—Ä–∏ –ø–æ–∑–∏—Ü—ñ–π
    buyAmountUsdt: 100,
    maxOpenTrades: 5,
    
    // –§—ñ–ª—å—Ç—Ä–∏
    minLiquidityUsdt: 5000,
    maxPriceImpact: 1.0,
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó
    binanceFeePercent: 0.1,
    cooldownSeconds: 180,
    maxTradeTimeMinutes: 10
  };
}

/**
 * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó
 */
function displaySimulationResults(results) {
  const { summary } = results;
  
  console.log(`
üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –°–ò–ú–£–õ–Ø–¶–Ü–á
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
   ‚Ä¢ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${summary.initialBalance.toFixed(2)} USDT
   ‚Ä¢ –ö—ñ–Ω—Ü–µ–≤–∏–π –±–∞–ª–∞–Ω—Å: ${summary.finalBalance.toFixed(2)} USDT
   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: ${summary.totalReturn.toFixed(2)} USDT
   ‚Ä¢ ROI: ${summary.roiPercent}%

üìà –¢–æ—Ä–≥–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏:
   ‚Ä¢ –í—Å—å–æ–≥–æ —É–≥–æ–¥: ${summary.totalTrades}
   ‚Ä¢ –ü—Ä–∏–±—É—Ç–∫–æ–≤—ñ: ${summary.profitableTrades}
   ‚Ä¢ –ó–±–∏—Ç–∫–æ–≤—ñ: ${summary.losingTrades}
   ‚Ä¢ Win Rate: ${summary.winRate}%

üìâ –†–∏–∑–∏–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞: ${summary.maxDrawdown}%
   ‚Ä¢ Profit Factor: ${summary.profitFactor}
   ‚Ä¢ Sharpe Ratio: ${summary.sharpeRatio}
   ‚Ä¢ –ú–∞–∫—Å. –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ –∑–±–∏—Ç–∫–∏: ${summary.maxConsecutiveLosses}

üí∏ –í–∏—Ç—Ä–∞—Ç–∏:
   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±'—î–º: ${summary.totalVolume.toFixed(2)} USDT
   ‚Ä¢ –ö–æ–º—ñ—Å—ñ—ó: ${summary.totalCommissions.toFixed(2)} USDT
  `);
}

/**
 * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
 */
function displayOptimizationResults(results) {
  console.log(`
üîß –†–ï–ó–£–õ–¨–¢–ê–¢–ò –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê`);
  
  results.slice(0, 5).forEach((result, index) => {
    const { config, performance } = result;
    console.log(`
${index + 1}. ${config.name}
   ‚Ä¢ Take Profit: ${config.takeProfitPercent}%
   ‚Ä¢ Stop Loss: ${config.stopLossPercent}%
   ‚Ä¢ Trailing Stop: ${config.trailingStopPercent}%
   ‚Ä¢ ROI: ${performance.roiPercent}%
   ‚Ä¢ Win Rate: ${performance.winRate}%
   ‚Ä¢ Trades: ${performance.totalTrades}`);
  });
}

/**
 * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –±–µ–∫—Ç–µ—Å—Ç—É
 */
function displayBacktestResults(results) {
  displaySimulationResults(results);
  
  const { summary } = results;
  
  console.log(`
üìä –î–û–î–ê–¢–ö–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
‚è±Ô∏è  –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —É–≥–æ–¥–∏: ${summary.averageTradeTime} —Ö–≤
üîÑ –¢–∏–ø–∏ –≤–∏—Ö–æ–¥—ñ–≤:
   ‚Ä¢ Take Profit: ${summary.exitReasonStats.takeProfit}
   ‚Ä¢ Stop Loss: ${summary.exitReasonStats.stopLoss}
   ‚Ä¢ Trailing Stop: ${summary.exitReasonStats.trailingStop}
   ‚Ä¢ Timeout: ${summary.exitReasonStats.timeout}

üìã –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:
   ‚Ä¢ –û–±—Ä–æ–±–ª–µ–Ω–æ –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤: ${summary.processedListings}
   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${summary.skippedListings}
   ‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–∏–º—É–ª—è—Ü—ñ—ó: ${Math.round(summary.simulationDuration / 1000)}s
  `);
}

/**
 * Graceful shutdown
 */
async function gracefulShutdown(signal) {
  logger.info(`üì¥ Received ${signal}. Starting graceful shutdown...`);
  isShuttingDown = true;
  
  try {
    if (tradingEngine) {
      logger.info('üîÑ Stopping trading engine...');
      await tradingEngine.stop();
      logger.info('‚úÖ Trading engine stopped');
    }
    
    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
    const db = getDatabase();
    if (db) {
      db.close();
      logger.info('‚úÖ Database connection closed');
    }
    
    logger.info('‚úÖ Graceful shutdown completed');
    process.exit(0);
    
  } catch (error) {
    logger.error('‚ùå Error during shutdown:', error);
    process.exit(1);
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
 */
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Graceful shutdown handlers
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    logger.error('‚ùå Fatal error:', error);
    process.exit(1);
  });
}