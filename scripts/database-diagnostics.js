#!/usr/bin/env node

import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
dotenv.config();

const DB_PATH = process.env.DB_PATH || './data/simulation.db';

/**
 * –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
 */
class DatabaseDiagnostics {
  constructor() {
    this.db = null;
  }

  /**
   * –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
   */
  async connect() {
    try {
      this.db = await open({
        filename: DB_PATH,
        driver: sqlite3.Database
      });
      console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î:', error.message);
      return false;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
   */
  checkDatabaseFile() {
    console.log('\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –§–ê–ô–õ–£ –ë–ê–ó–ò –î–ê–ù–ò–•');
    console.log('‚ïê'.repeat(50));
    
    const dbDir = path.dirname(DB_PATH);
    const dbFile = path.basename(DB_PATH);
    
    console.log(`üìÅ –®–ª—è—Ö –¥–æ –ë–î: ${DB_PATH}`);
    console.log(`üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: ${dbDir}`);
    console.log(`üìÑ –§–∞–π–ª: ${dbFile}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if (fs.existsSync(dbDir)) {
      console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —ñ—Å–Ω—É—î');
    } else {
      console.log('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ —ñ—Å–Ω—É—î');
      return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É
    if (fs.existsSync(DB_PATH)) {
      const stats = fs.statSync(DB_PATH);
      console.log('‚úÖ –§–∞–π–ª –ë–î —ñ—Å–Ω—É—î');
      console.log(`üìä –†–æ–∑–º—ñ—Ä: ${(stats.size / 1024).toFixed(2)} KB`);
      console.log(`üïí –°—Ç–≤–æ—Ä–µ–Ω–æ: ${stats.birthtime.toLocaleString()}`);
      console.log(`üîÑ –ó–º—ñ–Ω–µ–Ω–æ: ${stats.mtime.toLocaleString()}`);
      return true;
    } else {
      console.log('‚ùå –§–∞–π–ª –ë–î –Ω–µ —ñ—Å–Ω—É—î');
      return false;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
   */
  async getTables() {
    const query = `
      SELECT name, type, sql 
      FROM sqlite_master 
      WHERE type IN ('table', 'view') 
      ORDER BY name
    `;
    
    try {
      const tables = await this.db.all(query);
      return tables;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å:', error.message);
      return [];
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ
   */
  async getTableStructure(tableName) {
    try {
      const columns = await this.db.all(`PRAGMA table_info(${tableName})`);
      const indexes = await this.db.all(`PRAGMA index_list(${tableName})`);
      
      return {
        columns,
        indexes
      };
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ç–∞–±–ª–∏—Ü—ñ ${tableName}:`, error.message);
      return { columns: [], indexes: [] };
    }
  }

  /**
   * –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ
   */
  async getTableCount(tableName) {
    try {
      const result = await this.db.get(`SELECT COUNT(*) as count FROM ${tableName}`);
      return result.count;
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –∑–∞–ø–∏—Å—ñ–≤ —É ${tableName}:`, error.message);
      return 0;
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
   */
  async showDatabaseStructure() {
    console.log('\nüìã –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–ò –î–ê–ù–ò–•');
    console.log('‚ïê'.repeat(50));
    
    const tables = await this.getTables();
    
    if (tables.length === 0) {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∞–±–æ –ë–î –ø–æ—Ä–æ–∂–Ω—è');
      return;
    }
    
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: ${tables.length}\n`);
    
    for (const table of tables) {
      console.log(`üóÇÔ∏è  –¢–ê–ë–õ–ò–¶–Ø: ${table.name}`);
      console.log('-'.repeat(30));
      
      // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–ø–∏—Å—ñ–≤
      const count = await this.getTableCount(table.name);
      console.log(`üìà –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: ${count}`);
      
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
      const structure = await this.getTableStructure(table.name);
      
      if (structure.columns.length > 0) {
        console.log('üìù –ö–æ–ª–æ–Ω–∫–∏:');
        structure.columns.forEach(col => {
          const nullable = col.notnull ? 'NOT NULL' : 'NULL';
          const primary = col.pk ? ' [PRIMARY KEY]' : '';
          const defaultValue = col.dflt_value ? ` DEFAULT ${col.dflt_value}` : '';
          console.log(`   ‚Ä¢ ${col.name}: ${col.type} ${nullable}${defaultValue}${primary}`);
        });
      }
      
      if (structure.indexes.length > 0) {
        console.log('üîç –Ü–Ω–¥–µ–∫—Å–∏:');
        structure.indexes.forEach(idx => {
          const unique = idx.unique ? 'UNIQUE' : 'INDEX';
          console.log(`   ‚Ä¢ ${idx.name} (${unique})`);
        });
      }
      
      console.log();
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫–ª—é—á–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
   */
  async showRecentData() {
    console.log('\nüìä –û–°–¢–ê–ù–ù–Ü –î–ê–ù–Ü');
    console.log('‚ïê'.repeat(50));
    
    const tables = await this.getTables();
    const dataTables = tables.filter(t => 
      ['symbols', 'klines', 'simulation_configs', 'simulation_results', 'simulation_summary'].includes(t.name)
    );
    
    for (const table of dataTables) {
      console.log(`\nüìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∑ ${table.name}:`);
      console.log('-'.repeat(40));
      
      try {
        const recentData = await this.db.all(
          `SELECT * FROM ${table.name} ORDER BY rowid DESC LIMIT 3`
        );
        
        if (recentData.length === 0) {
          console.log('   üì≠ –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö');
        } else {
          recentData.forEach((row, index) => {
            console.log(`   ${index + 1}. ${JSON.stringify(row, null, 2)}`);
          });
        }
      } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö
   */
  async checkDataIntegrity() {
    console.log('\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –¶–Ü–õ–Ü–°–ù–û–°–¢–Ü –î–ê–ù–ò–•');
    console.log('‚ïê'.repeat(50));
    
    const checks = [
      {
        name: '–°–∏–º–≤–æ–ª–∏ –±–µ–∑ K-line –¥–∞–Ω–∏—Ö',
        query: `
          SELECT s.symbol 
          FROM symbols s 
          LEFT JOIN klines k ON s.symbol = k.symbol 
          WHERE k.symbol IS NULL
          LIMIT 5
        `
      },
      {
        name: 'K-lines –±–µ–∑ —Å–∏–º–≤–æ–ª—ñ–≤',
        query: `
          SELECT DISTINCT k.symbol 
          FROM klines k 
          LEFT JOIN symbols s ON k.symbol = s.symbol 
          WHERE s.symbol IS NULL
          LIMIT 5
        `
      },
      {
        name: '–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤',
        query: `
          SELECT sc.name 
          FROM simulation_configs sc 
          LEFT JOIN simulation_results sr ON sc.id = sr.config_id 
          WHERE sr.config_id IS NULL
          LIMIT 5
        `
      },
      {
        name: '–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç K-lines',
        query: `
          SELECT 
            MIN(datetime(open_time/1000, 'unixepoch')) as earliest,
            MAX(datetime(open_time/1000, 'unixepoch')) as latest,
            COUNT(*) as total_klines
          FROM klines
        `
      }
    ];
    
    for (const check of checks) {
      console.log(`\nüîç ${check.name}:`);
      try {
        const result = await this.db.all(check.query);
        if (result.length === 0) {
          console.log('   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        } else {
          result.forEach(row => {
            console.log(`   üìÑ ${JSON.stringify(row)}`);
          });
        }
      } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${error.message}`);
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —Å–∏–º—É–ª—è—Ü—ñ—ó
   */
  async showSimulationConfigs() {
    console.log('\n‚öôÔ∏è  –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á –°–ò–ú–£–õ–Ø–¶–Ü–á');
    console.log('‚ïê'.repeat(50));
    
    try {
      const configs = await this.db.all(`
        SELECT 
          id, name, take_profit_percent, stop_loss_percent,
          buy_amount_usdt, max_open_trades, created_at
        FROM simulation_configs 
        ORDER BY created_at DESC
        LIMIT 10
      `);
      
      if (configs.length === 0) {
        console.log('‚ùå –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');
        return;
      }
      
      configs.forEach((config, index) => {
        console.log(`\n${index + 1}. ${config.name} (ID: ${config.id})`);
        console.log(`   üìà Take Profit: ${config.take_profit_percent}%`);
        console.log(`   üìâ Stop Loss: ${config.stop_loss_percent}%`);
        console.log(`   üí∞ –†–æ–∑–º—ñ—Ä –ø–æ–∑–∏—Ü—ñ—ó: $${config.buy_amount_usdt}`);
        console.log(`   üî¢ –ú–∞–∫—Å. —É–≥–æ–¥: ${config.max_open_trades}`);
        console.log(`   üïí –°—Ç–≤–æ—Ä–µ–Ω–æ: ${config.created_at}`);
      });
    } catch (error) {
      console.log(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π: ${error.message}`);
    }
  }

  /**
   * –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async runDiagnostics() {
    console.log('üîß –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• BINANCE SIMULATOR');
    console.log('‚ïê'.repeat(60));
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—É
    if (!this.checkDatabaseFile()) {
      console.log('\n‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm run db:init');
      return;
    }
    
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    if (!(await this.connect())) {
      return;
    }
    
    try {
      // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î
      await this.showDatabaseStructure();
      
      // –û—Å—Ç–∞–Ω–Ω—ñ –¥–∞–Ω—ñ
      await this.showRecentData();
      
      // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
      await this.showSimulationConfigs();
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
      await this.checkDataIntegrity();
      
      console.log('\n‚úÖ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê');
      console.log('‚ïê'.repeat(60));
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    } finally {
      if (this.db) {
        await this.db.close();
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const diagnostics = new DatabaseDiagnostics();
diagnostics.runDiagnostics().catch(console.error);

export default DatabaseDiagnostics;