#!/usr/bin/env node

import 'dotenv/config';
import { initializeDatabase } from '../src/database/init.js';
import { SymbolCollector } from '../src/collectors/symbolCollector.js';
import { ListingAnalyzer } from '../src/collectors/listingAnalyzer.js';
import { KlineCollector } from '../src/collectors/klineCollector.js';
import logger from '../src/utils/logger.js';
import chalk from 'chalk';

async function main() {
  console.log(chalk.cyan('\nüöÄ Starting historical data collection...\n'));
  
  try {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
    console.log(chalk.yellow('üìä Initializing database...'));
    await initializeDatabase();
    
    // –ï—Ç–∞–ø 1: –ó–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤
    console.log(chalk.yellow('\nüìã Stage 1: Collecting USDT symbols...'));
    const symbolCollector = new SymbolCollector();
    const symbolCount = await symbolCollector.collectAllUSDTSymbols();
    console.log(chalk.green(`‚úÖ Collected ${symbolCount} USDT symbols\n`));
    
    // –ï—Ç–∞–ø 2: –ê–Ω–∞–ª—ñ–∑ –¥–∞—Ç –ª—ñ—Å—Ç–∏–Ω–≥—É
    console.log(chalk.yellow('üîç Stage 2: Analyzing listing dates...'));
    const listingAnalyzer = new ListingAnalyzer();
    const analysisResults = await listingAnalyzer.analyzeListingDates();
    console.log(chalk.green(`‚úÖ Analyzed ${analysisResults.analyzed} symbols`));
    console.log(chalk.red(`‚ùå Failed: ${analysisResults.failed} symbols\n`));
    
    // –ï—Ç–∞–ø 3: –ó–±—ñ—Ä —Ö–≤–∏–ª–∏–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–æ–≤–∏—Ö –ª—ñ—Å—Ç–∏–Ω–≥—ñ–≤
    console.log(chalk.yellow('üìà Stage 3: Collecting minute klines for new listings...'));
    const klineCollector = new KlineCollector();
    const klineResults = await klineCollector.collectRecentListingsData(180); // 180 –¥–Ω—ñ–≤
    console.log(chalk.green(`‚úÖ Collected data for ${klineResults.successful} symbols`));
    console.log(chalk.red(`‚ùå Failed: ${klineResults.failed} symbols\n`));
    
    // –§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(chalk.cyan('üìä Final Statistics:'));
    const stats = await getCollectionStats();
    console.log(chalk.white(`   Total symbols: ${stats.totalSymbols}`));
    console.log(chalk.white(`   Analyzed listings: ${stats.analyzedListings}`));
    console.log(chalk.white(`   New listings (180d): ${stats.newListings}`));
    console.log(chalk.white(`   Total klines collected: ${stats.totalKlines}`));
    
    console.log(chalk.green('\n‚ú® Data collection completed successfully!\n'));
    
  } catch (error) {
    console.error(chalk.red('\n‚ùå Error during data collection:'), error);
    process.exit(1);
  }
}

async function getCollectionStats() {
  const { getDatabase } = await import('../src/database/init.js');
  const db = await getDatabase();
  
  const stats = {
    totalSymbols: (await db.get('SELECT COUNT(*) as count FROM symbols')).count,
    analyzedListings: (await db.get('SELECT COUNT(*) as count FROM listing_analysis WHERE data_status = "analyzed"')).count,
    newListings: (await db.get(`
      SELECT COUNT(*) as count
      FROM listing_analysis
      WHERE data_status = "analyzed"
      AND listing_date >= ?
    `, Date.now() - (180 * 24 * 60 * 60 * 1000))).count,
    totalKlines: (await db.get('SELECT COUNT(*) as count FROM historical_klines')).count
  };
  
  return stats;
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);

