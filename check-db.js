#!/usr/bin/env node

import 'dotenv/config';
import { getDatabase } from './src/database/init.js';
import chalk from 'chalk';

async function checkDatabase() {
  console.log(chalk.cyan('\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...\n'));
  
  try {
    const db = await getDatabase();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
    console.log(chalk.yellow('üìã –Ü—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ:'));
    const tables = await db.all(`
      SELECT name FROM sqlite_master 
      WHERE type='table' AND name NOT LIKE 'sqlite_%'
      ORDER BY name
    `);
    
    for (const table of tables) {
      console.log(`   ‚Ä¢ ${table.name}`);
    }
    console.log();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤ —É –∫–æ–∂–Ω—ñ–π —Ç–∞–±–ª–∏—Ü—ñ
    console.log(chalk.yellow('üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤:'));
    
    for (const table of tables) {
      try {
        const countResult = await db.get(`SELECT COUNT(*) as count FROM ${table.name}`);
        console.log(`   ‚Ä¢ ${table.name}: ${countResult.count} –∑–∞–ø–∏—Å—ñ–≤`);
      } catch (error) {
        console.log(`   ‚Ä¢ ${table.name}: –ø–æ–º–∏–ª–∫–∞ - ${error.message}`);
      }
    }
    console.log();
    
    // –î–µ—Ç–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
    const keyTables = ['simulation_configs', 'simulation_results', 'simulation_summary'];
    
    for (const tableName of keyTables) {
      if (tables.find(t => t.name === tableName)) {
        console.log(chalk.yellow(`üîç –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ ${tableName}:`));
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ
        const schema = await db.all(`PRAGMA table_info(${tableName})`);
        console.log('   –ö–æ–ª–æ–Ω–∫–∏:');
        schema.forEach(col => {
          console.log(`     - ${col.name} (${col.type})`);
        });
        
        // –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏
        try {
          const sampleData = await db.all(`SELECT * FROM ${tableName} LIMIT 3`);
          if (sampleData.length > 0) {
            console.log('   –ü—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö:');
            console.table(sampleData);
          } else {
            console.log('   üì≠ –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è');
          }
        } catch (error) {
          console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è: ${error.message}`);
        }
        console.log();
      }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó
    console.log(chalk.yellow('üé≤ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó:'));
    
    try {
      const configCount = await db.get('SELECT COUNT(*) as count FROM simulation_configs');
      const resultCount = await db.get('SELECT COUNT(*) as count FROM simulation_results');
      const summaryCount = await db.get('SELECT COUNT(*) as count FROM simulation_summary');
      
      console.log(`   ‚Ä¢ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: ${configCount.count}`);
      console.log(`   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É–≥–æ–¥: ${resultCount.count}`);
      console.log(`   ‚Ä¢ –ó–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${summaryCount.count}`);
      
      if (resultCount.count === 0) {
        console.log(chalk.red('\n‚ùå –ù–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Å–∏–º—É–ª—è—Ü—ñ—ó!'));
        console.log(chalk.white('   –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:'));
        console.log(chalk.white('   1. –°–∏–º—É–ª—è—Ü—ñ—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø—ñ—à–Ω–æ'));
        console.log(chalk.white('   2. –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î'));
        console.log(chalk.white('   3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —á–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'));
      } else {
        console.log(chalk.green('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó –∑–Ω–∞–π–¥–µ–Ω—ñ!'));
      }
      
    } catch (error) {
      console.log(chalk.red(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: ${error.message}`));
    }
    
    console.log(chalk.green('\nüéâ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n'));
    
  } catch (error) {
    console.error(chalk.red('\n‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î:'), error);
    process.exit(1);
  }
}

checkDatabase().catch(console.error);